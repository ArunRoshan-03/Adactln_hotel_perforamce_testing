<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="AdactIn_hotel_app">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
        <stringProp name="filename">C:/Users/arunroshan.r/Documents/JMeter/apache-jmeter-5.6/bin/Hoteldata.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">Firstname,Lastname,Address,Credit_Card_No,CVV_Number</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">false</boolProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">adactinhotelapp.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Hotel_Order_Id_matchNr" elementType="Argument">
            <stringProp name="Argument.value">${Hotel_order_Id_matchNr}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.name">Hotel_Order_Id_matchNr</stringProp>
          </elementProp>
          <elementProp name="Csv_file_path" elementType="Argument">
            <stringProp name="Argument.name">Csv_file_path</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">&quot;C:\\Users\\arunroshan.r\\Documents\\JMeter\\apache-jmeter-5.6\\bin\\CSV data folder\\Adactln_hotel_booking_deatail.csv&quot;</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${host}</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_01 Launch_the_AdactIn_hotel_app">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-launch">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_02 Login_to_the_AdactIn_hotel_app">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/-login">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="username" elementType="HTTPArgument">
                    <stringProp name="Argument.name">username</stringProp>
                    <stringProp name="Argument.value">ArunRoshan0308</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <stringProp name="Argument.name">password</stringProp>
                    <stringProp name="Argument.value">Atmecs123</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="login" elementType="HTTPArgument">
                    <stringProp name="Argument.name">login</stringProp>
                    <stringProp name="Argument.value">Login</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://adactinhotelapp.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://adactinhotelapp.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/login-134">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/SearchHotel.php</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://adactinhotelapp.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Login page assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-46430476">Welcome to Adactin Group of Hotels</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Login page went worng!</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_03 Select_the_required_fields_and_click_on_the_search">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/SelectHotel.php-147">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="location" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">location</stringProp>
                    <stringProp name="Argument.value">Los Angeles</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="hotels" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">hotels</stringProp>
                    <stringProp name="Argument.value">Hotel Cornice</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="room_type" elementType="HTTPArgument">
                    <stringProp name="Argument.name">room_type</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="room_nos" elementType="HTTPArgument">
                    <stringProp name="Argument.name">room_nos</stringProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="datepick_in" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">datepick_in</stringProp>
                    <stringProp name="Argument.value">12/07/2023</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="datepick_out" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">datepick_out</stringProp>
                    <stringProp name="Argument.value">13/07/2023</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="adult_room" elementType="HTTPArgument">
                    <stringProp name="Argument.name">adult_room</stringProp>
                    <stringProp name="Argument.value">4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="child_room" elementType="HTTPArgument">
                    <stringProp name="Argument.name">child_room</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="Submit" elementType="HTTPArgument">
                    <stringProp name="Argument.name">Submit</stringProp>
                    <stringProp name="Argument.value">Search</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="datepick_diff" elementType="HTTPArgument">
                    <stringProp name="Argument.name">datepick_diff</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/SelectHotel.php</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://adactinhotelapp.com/SearchHotel.php</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://adactinhotelapp.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Select hotel">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-683541380">Adactin.com - Select Hotel</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Select hotel page went worng!</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_04 Select_the_first_hotel_and_click_on_continue">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/BookHotel.php-150">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="radiobutton_1" elementType="HTTPArgument">
                    <stringProp name="Argument.name">radiobutton_1</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="total_radiobutton" elementType="HTTPArgument">
                    <stringProp name="Argument.name">total_radiobutton</stringProp>
                    <stringProp name="Argument.value">4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="hotel_name_1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">hotel_name_1</stringProp>
                    <stringProp name="Argument.value">Hotel Cornice</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="location_1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">location_1</stringProp>
                    <stringProp name="Argument.value">Los Angeles</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="rooms_1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">rooms_1</stringProp>
                    <stringProp name="Argument.value">2 Rooms</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="arr_date_1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arr_date_1</stringProp>
                    <stringProp name="Argument.value">12/07/2023</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dep_date_1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dep_date_1</stringProp>
                    <stringProp name="Argument.value">13/07/2023</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="no_days_1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">no_days_1</stringProp>
                    <stringProp name="Argument.value">1 Days</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="room_type_1" elementType="HTTPArgument">
                    <stringProp name="Argument.name">room_type_1</stringProp>
                    <stringProp name="Argument.value">Standard</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="price_night_1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">price_night_1</stringProp>
                    <stringProp name="Argument.value">AUD $ 100</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="total_price_1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">total_price_1</stringProp>
                    <stringProp name="Argument.value">AUD $ 110</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="hotel_name_2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">hotel_name_2</stringProp>
                    <stringProp name="Argument.value">Hotel Cornice</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="location_2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">location_2</stringProp>
                    <stringProp name="Argument.value">Los Angeles</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="rooms_2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">rooms_2</stringProp>
                    <stringProp name="Argument.value">2 Rooms</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="arr_date_2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arr_date_2</stringProp>
                    <stringProp name="Argument.value">12/07/2023</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dep_date_2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dep_date_2</stringProp>
                    <stringProp name="Argument.value">13/07/2023</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="no_days_2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">no_days_2</stringProp>
                    <stringProp name="Argument.value">1 Days</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="room_type_2" elementType="HTTPArgument">
                    <stringProp name="Argument.name">room_type_2</stringProp>
                    <stringProp name="Argument.value">Double</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="price_night_2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">price_night_2</stringProp>
                    <stringProp name="Argument.value">AUD $ 200</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="total_price_2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">total_price_2</stringProp>
                    <stringProp name="Argument.value">AUD $ 210</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="hotel_name_3" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">hotel_name_3</stringProp>
                    <stringProp name="Argument.value">Hotel Cornice</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="location_3" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">location_3</stringProp>
                    <stringProp name="Argument.value">Los Angeles</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="rooms_3" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">rooms_3</stringProp>
                    <stringProp name="Argument.value">2 Rooms</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="arr_date_3" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arr_date_3</stringProp>
                    <stringProp name="Argument.value">12/07/2023</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dep_date_3" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dep_date_3</stringProp>
                    <stringProp name="Argument.value">13/07/2023</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="no_days_3" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">no_days_3</stringProp>
                    <stringProp name="Argument.value">1 Days</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="room_type_3" elementType="HTTPArgument">
                    <stringProp name="Argument.name">room_type_3</stringProp>
                    <stringProp name="Argument.value">Deluxe</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="price_night_3" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">price_night_3</stringProp>
                    <stringProp name="Argument.value">AUD $ 300</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="total_price_3" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">total_price_3</stringProp>
                    <stringProp name="Argument.value">AUD $ 310</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="hotel_name_4" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">hotel_name_4</stringProp>
                    <stringProp name="Argument.value">Hotel Cornice</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="location_4" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">location_4</stringProp>
                    <stringProp name="Argument.value">Los Angeles</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="rooms_4" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">rooms_4</stringProp>
                    <stringProp name="Argument.value">2 Rooms</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="arr_date_4" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arr_date_4</stringProp>
                    <stringProp name="Argument.value">12/07/2023</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dep_date_4" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dep_date_4</stringProp>
                    <stringProp name="Argument.value">13/07/2023</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="no_days_4" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">no_days_4</stringProp>
                    <stringProp name="Argument.value">1 Days</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="room_type_4" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">room_type_4</stringProp>
                    <stringProp name="Argument.value">Super Deluxe</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="price_night_4" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">price_night_4</stringProp>
                    <stringProp name="Argument.value">AUD $ 400</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="total_price_4" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">total_price_4</stringProp>
                    <stringProp name="Argument.value">AUD $ 410</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="continue" elementType="HTTPArgument">
                    <stringProp name="Argument.name">continue</stringProp>
                    <stringProp name="Argument.value">Continue</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="hotel_name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">hotel_name</stringProp>
                    <stringProp name="Argument.value">Hotel Cornice</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="location_name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">location_name</stringProp>
                    <stringProp name="Argument.value">Los Angeles</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="room_types" elementType="HTTPArgument">
                    <stringProp name="Argument.name">room_types</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="rooms_no" elementType="HTTPArgument">
                    <stringProp name="Argument.name">rooms_no</stringProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="arr_date" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arr_date</stringProp>
                    <stringProp name="Argument.value">12/07/2023</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dep_date" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dep_date</stringProp>
                    <stringProp name="Argument.value">13/07/2023</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="no_days" elementType="HTTPArgument">
                    <stringProp name="Argument.name">no_days</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="adults_room" elementType="HTTPArgument">
                    <stringProp name="Argument.name">adults_room</stringProp>
                    <stringProp name="Argument.value">4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="children_room" elementType="HTTPArgument">
                    <stringProp name="Argument.name">children_room</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="price_night" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">price_night</stringProp>
                    <stringProp name="Argument.value">AUD $ 100</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="total_price" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">total_price</stringProp>
                    <stringProp name="Argument.value">AUD $ 110</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/BookHotel.php</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://adactinhotelapp.com/SelectHotel.php</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://adactinhotelapp.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Booking hotel page ">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1039180342">Adactin.com - Book A Hotel</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Booking hotel page is outdated!</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_05 Provide_the_additional_required_details_and_click_on_book_now">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/BookingConfirm.php-153">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="first_name" elementType="HTTPArgument">
                    <stringProp name="Argument.name">first_name</stringProp>
                    <stringProp name="Argument.value">${Firstname}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="last_name" elementType="HTTPArgument">
                    <stringProp name="Argument.name">last_name</stringProp>
                    <stringProp name="Argument.value">${Lastname}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="address" elementType="HTTPArgument">
                    <stringProp name="Argument.name">address</stringProp>
                    <stringProp name="Argument.value">${Address}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cc_num" elementType="HTTPArgument">
                    <stringProp name="Argument.name">cc_num</stringProp>
                    <stringProp name="Argument.value">${Credit_Card_No}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cc_type" elementType="HTTPArgument">
                    <stringProp name="Argument.name">cc_type</stringProp>
                    <stringProp name="Argument.value">AMEX</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cc_exp_month" elementType="HTTPArgument">
                    <stringProp name="Argument.name">cc_exp_month</stringProp>
                    <stringProp name="Argument.value">11</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cc_exp_year" elementType="HTTPArgument">
                    <stringProp name="Argument.name">cc_exp_year</stringProp>
                    <stringProp name="Argument.value">2024</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cc_cvv" elementType="HTTPArgument">
                    <stringProp name="Argument.name">cc_cvv</stringProp>
                    <stringProp name="Argument.value">${CVV_Number}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="hotel_name_hid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">hotel_name_hid</stringProp>
                    <stringProp name="Argument.value">Hotel Cornice</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="location_name_hid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">location_name_hid</stringProp>
                    <stringProp name="Argument.value">Los Angeles</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="room_types_hid" elementType="HTTPArgument">
                    <stringProp name="Argument.name">room_types_hid</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="rooms_no_hid" elementType="HTTPArgument">
                    <stringProp name="Argument.name">rooms_no_hid</stringProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="arr_date_hid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arr_date_hid</stringProp>
                    <stringProp name="Argument.value">12/07/2023</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dep_date_hid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dep_date_hid</stringProp>
                    <stringProp name="Argument.value">13/07/2023</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="no_days_hid" elementType="HTTPArgument">
                    <stringProp name="Argument.name">no_days_hid</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="adults_room_hid" elementType="HTTPArgument">
                    <stringProp name="Argument.name">adults_room_hid</stringProp>
                    <stringProp name="Argument.value">4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="children_room_hid" elementType="HTTPArgument">
                    <stringProp name="Argument.name">children_room_hid</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="price_night_hid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">price_night_hid</stringProp>
                    <stringProp name="Argument.value">AUD $ 100</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="total_price_hid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">total_price_hid</stringProp>
                    <stringProp name="Argument.value">AUD $ 110</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="gst_hid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">gst_hid</stringProp>
                    <stringProp name="Argument.value">AUD $ 11</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="final_price_hid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">final_price_hid</stringProp>
                    <stringProp name="Argument.value">AUD $ 121</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/BookingConfirm.php</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://adactinhotelapp.com/BookHotel.php</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://adactinhotelapp.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_Order_Id">
                <stringProp name="RegexExtractor.refname">C_Order_Id</stringProp>
                <stringProp name="RegexExtractor.regex"> class=&quot;disable_text&quot; id=&quot;order_no&quot; value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">C_Order_Id is not found</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_Order_Number">
                <stringProp name="RegexExtractor.refname">C_Order_Number</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;order_no&quot; value=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">C_Order_Number is not found</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Hotel Booking Confirmation assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1450968532">Adactin.com - Hotel Booking Confirmation</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Hotel Booking Confirmation page is outdated!</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_06 Click_on_my_itinerary">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/BookedItinerary.php-155">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/BookedItinerary.php</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://adactinhotelapp.com/BookingConfirm.php</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1006813150">${C_Order_Id}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">${C_Order_Id} is missing </stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_booking_id">
                <stringProp name="RegexExtractor.regex">id=&quot;order_id_(.+?)&quot; type=&quot;text&quot; value=&quot;${C_Order_Number}&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">C_booking_id</stringProp>
                <stringProp name="RegexExtractor.default">C_booking_id is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_booking_id_value">
                <stringProp name="RegexExtractor.regex">id=&quot;order_id_${C_booking_id}&quot; type=&quot;text&quot; value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">C_booking_id_value</stringProp>
                <stringProp name="RegexExtractor.default">C_booking_id_value is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_booking_hotel_name">
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">C_booking_hotel_name</stringProp>
                <stringProp name="RegexExtractor.default">${C_booking_hotel_name} is not found</stringProp>
                <stringProp name="RegexExtractor.regex"> id=&quot;hotel_name_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_booking_hotel_location">
                <stringProp name="RegexExtractor.regex">id=&quot;location_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">C_booking_hotel_location</stringProp>
                <stringProp name="RegexExtractor.default">C_booking_hotel_location  is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_booking_hotel_rooms">
                <stringProp name="RegexExtractor.regex">id=&quot;rooms_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">C_booking_hotel_rooms</stringProp>
                <stringProp name="RegexExtractor.default">C_booking_hotel_rooms is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_booking_hotel_first_name">
                <stringProp name="RegexExtractor.regex">id=&quot;first_name_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">C_booking_hotel_first_name</stringProp>
                <stringProp name="RegexExtractor.default">C_booking_hotel_first_name is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_booking_hotel_last_name">
                <stringProp name="RegexExtractor.regex">id=&quot;last_name_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">C_booking_hotel_last_name</stringProp>
                <stringProp name="RegexExtractor.default">C_booking_hotel_last_name is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_booking_hotel_arr_date">
                <stringProp name="RegexExtractor.regex">id=&quot;arr_date_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">C_booking_hotel_arr_date</stringProp>
                <stringProp name="RegexExtractor.default">C_booking_hotel_arr_date is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_booking_hotel_dep_date">
                <stringProp name="RegexExtractor.regex">id=&quot;dep_date_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">C_booking_hotel_dep_date</stringProp>
                <stringProp name="RegexExtractor.default">C_booking_hotel_dep_date is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_booking_hotel_no_days">
                <stringProp name="RegexExtractor.regex">id=&quot;no_days_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">C_booking_hotel_no_days</stringProp>
                <stringProp name="RegexExtractor.default">C_booking_hotel_no_days is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_booking_hotel_price_night">
                <stringProp name="RegexExtractor.regex">id=&quot;price_night_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">C_booking_hotel_price_night</stringProp>
                <stringProp name="RegexExtractor.default">C_booking_hotel_price_night is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_booking_hotel_total_price">
                <stringProp name="RegexExtractor.regex">id=&quot;total_price_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">C_booking_hotel_total_price</stringProp>
                <stringProp name="RegexExtractor.default">C_booking_hotel_total_price is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Hotel_order_Id">
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">Hotel_order_Id</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;order_id_(.*?)&quot; type=&quot;text&quot; value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">Hotel_Order_Id is missing </stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Hotel_order_cancel_Id">
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">Hotel_order_cancel_Id</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;btn_id_(.*?)&quot; type=&quot;button&quot; style=&quot;width:150px;&quot; value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">Hotel_order_cancel_Id is missing </stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Hotel_name">
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">Hotel_name</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;hotel_name_(.*?)&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">Hotel_name is missing </stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Hotel_location">
                <stringProp name="RegexExtractor.regex">id=&quot;location_(.*?)&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">Hotel_location</stringProp>
                <stringProp name="RegexExtractor.default">Hotel_location  is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Hotel_rooms">
                <stringProp name="RegexExtractor.regex">id=&quot;rooms_(.*?)&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">Hotel_rooms</stringProp>
                <stringProp name="RegexExtractor.default">Hotel_rooms is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="User_first_name">
                <stringProp name="RegexExtractor.regex">id=&quot;first_name_(.*?)&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">User_first_name</stringProp>
                <stringProp name="RegexExtractor.default"> User_first_name is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="User_last_name">
                <stringProp name="RegexExtractor.regex">id=&quot;last_name_(.*?)&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">User_last_name</stringProp>
                <stringProp name="RegexExtractor.default">User_last_name is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Hotel_arrival_date">
                <stringProp name="RegexExtractor.regex">id=&quot;arr_date_(.*?)&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">Hotel_arrival_date</stringProp>
                <stringProp name="RegexExtractor.default">Hotel_arrival_date is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Hotel_departure_date">
                <stringProp name="RegexExtractor.regex">id=&quot;dep_date_(.*?)&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">Hotel_departure_date</stringProp>
                <stringProp name="RegexExtractor.default">Hotel_departure_date is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Booking_hotel_no_days">
                <stringProp name="RegexExtractor.regex">id=&quot;no_days_(.*?)&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">Booking_hotel_no_days</stringProp>
                <stringProp name="RegexExtractor.default">Booking_hotel_no_days is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Room_type">
                <stringProp name="RegexExtractor.regex">id=&quot;room_type_(.*?)&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">Room_type</stringProp>
                <stringProp name="RegexExtractor.default">Room_type is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Price_per_night">
                <stringProp name="RegexExtractor.regex">id=&quot;price_night_(.*?)&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">Price_per_night</stringProp>
                <stringProp name="RegexExtractor.default">Price_per_night is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Total_price">
                <stringProp name="RegexExtractor.regex">id=&quot;total_price_(.*?)&quot; type=&quot;text&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="RegexExtractor.refname">Total_price</stringProp>
                <stringProp name="RegexExtractor.default">Total_price is not found</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Storing the Booking hotel data to csv file">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">String hotelOrderMatchNr = vars.get(&quot;Hotel_order_Id_matchNr&quot;);
int count = Integer.parseInt(hotelOrderMatchNr);
String csvFilePath =${Csv_file_path} ;

try {
    FileWriter fileWriter = new FileWriter(csvFilePath);
    StringBuilder csvContent = new StringBuilder();
    csvContent.append(&quot;order_id,hotel_order_cancel_id,hotel_location,hotel_rooms,user_first_name,user_last_name,hotel_arrival_date,hotel_departure_date,booking_hotel_no_days,room_type,price_per_night,total_price\n&quot;);

    for (int i = 1; i &lt;= count; i++) {
        String order = vars.get(&quot;Hotel_order_Id_&quot; + i);
        String hotel_order_cancel_Id = vars.get(&quot;Hotel_order_cancel_Id_&quot; + i);
        String hotel_location = vars.get(&quot;Hotel_location_&quot; + i);
        String hotel_rooms = vars.get(&quot;Hotel_rooms_&quot; + i);
        String user_first_name = vars.get(&quot;User_first_name_&quot; + i);
        String user_last_name = vars.get(&quot;User_last_name_&quot; + i);
        String hotel_arrival_date = vars.get(&quot;Hotel_arrival_date_&quot; + i);
        String hotel_departure_date = vars.get(&quot;Hotel_departure_date_&quot; + i);
        String booking_hotel_no_days = vars.get(&quot;Booking_hotel_no_days_&quot; + i);
        String room_type = vars.get(&quot;Room_type_&quot; + i);
        String price_per_night = vars.get(&quot;Price_per_night_&quot; + i);
        String total_price = vars.get(&quot;Total_price_&quot; + i);

        csvContent.append(order).append(&quot;,&quot;)
                .append(hotel_order_cancel_Id).append(&quot;,&quot;)
                .append(hotel_location).append(&quot;,&quot;)
                .append(hotel_rooms).append(&quot;,&quot;)
                .append(user_first_name).append(&quot;,&quot;)
                .append(user_last_name).append(&quot;,&quot;)
                .append(hotel_arrival_date).append(&quot;,&quot;)
                .append(hotel_departure_date).append(&quot;,&quot;)
                .append(booking_hotel_no_days).append(&quot;,&quot;)
                .append(room_type).append(&quot;,&quot;)
                .append(price_per_night).append(&quot;,&quot;)
                .append(total_price).append(&quot;\n&quot;);
    }

    fileWriter.write(csvContent.toString());
    fileWriter.close();
} catch (IOException e) {
    e.printStackTrace();
}
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_07 Search_for_the_order_ID_and_click_on_go_button">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/BookedItinerary.php-157">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="order_id_text" elementType="HTTPArgument">
                    <stringProp name="Argument.name">order_id_text</stringProp>
                    <stringProp name="Argument.value">${C_Order_Id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="search_hotel_id" elementType="HTTPArgument">
                    <stringProp name="Argument.name">search_hotel_id</stringProp>
                    <stringProp name="Argument.value">Go</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="order_id_${C_booking_id}" elementType="HTTPArgument">
                    <stringProp name="Argument.name">order_id_${C_booking_id}</stringProp>
                    <stringProp name="Argument.value">${C_booking_id_value}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="hotel_name_${C_booking_id}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">hotel_name_${C_booking_id}</stringProp>
                    <stringProp name="Argument.value">${C_booking_hotel_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="location_${C_booking_id}" elementType="HTTPArgument">
                    <stringProp name="Argument.name">location_${C_booking_id}</stringProp>
                    <stringProp name="Argument.value">${C_booking_hotel_location}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="rooms_${C_booking_id}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">rooms_${C_booking_id}</stringProp>
                    <stringProp name="Argument.value">${C_booking_hotel_rooms}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="first_name_${C_booking_id}" elementType="HTTPArgument">
                    <stringProp name="Argument.name">first_name_${C_booking_id}</stringProp>
                    <stringProp name="Argument.value">${C_booking_hotel_first_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="last_name_${C_booking_id}" elementType="HTTPArgument">
                    <stringProp name="Argument.name">last_name_${C_booking_id}</stringProp>
                    <stringProp name="Argument.value">${C_booking_hotel_last_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="arr_date_${C_booking_id}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arr_date_${C_booking_id}</stringProp>
                    <stringProp name="Argument.value">${C_booking_hotel_arr_date}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dep_date_${C_booking_id}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dep_date_${C_booking_id}</stringProp>
                    <stringProp name="Argument.value">${C_booking_hotel_dep_date}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="no_days_${C_booking_id}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">no_days_${C_booking_id}</stringProp>
                    <stringProp name="Argument.value">${C_booking_hotel_no_days}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="room_type_${C_booking_id}" elementType="HTTPArgument">
                    <stringProp name="Argument.name">room_type_${C_booking_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="price_night_${C_booking_id}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">price_night_${C_booking_id}</stringProp>
                    <stringProp name="Argument.value">${C_booking_hotel_price_night}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="total_price_${C_booking_id}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">total_price_${C_booking_id}</stringProp>
                    <stringProp name="Argument.value">${C_booking_hotel_total_price}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/BookedItinerary.php</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://adactinhotelapp.com/BookedItinerary.php</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://adactinhotelapp.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Searching_hotel_Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1397606179">id=&quot;order_id_${C_booking_id}&quot; type=&quot;text&quot; value=&quot;${C_booking_id_value}&quot;</stringProp>
                  <stringProp name="-1178819214">id=&quot;hotel_name_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;${C_booking_hotel_name}&quot;</stringProp>
                  <stringProp name="-617578277">id=&quot;location_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;${C_booking_hotel_location}&quot;</stringProp>
                  <stringProp name="-569203495">id=&quot;rooms_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;${C_booking_hotel_rooms}&quot;</stringProp>
                  <stringProp name="1534051045">id=&quot;first_name_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;${C_booking_hotel_first_name}&quot;</stringProp>
                  <stringProp name="-596936103">id=&quot;last_name_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;${C_booking_hotel_last_name}&quot;</stringProp>
                  <stringProp name="-208192631">id=&quot;arr_date_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;${C_booking_hotel_arr_date}&quot;</stringProp>
                  <stringProp name="-1470474067">id=&quot;dep_date_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;${C_booking_hotel_dep_date}&quot;</stringProp>
                  <stringProp name="-812470727">id=&quot;no_days_${C_booking_id}&quot; type=&quot;text&quot;  value=&quot;${C_booking_hotel_no_days}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">searching hotels not matched as expected</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_08  Click_on_Logout">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/Logout.php-160">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">adactinhotelapp.com</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/Logout.php</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://adactinhotelapp.com/BookedItinerary.php</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="false">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list">
          <stringProp name="805311387">windowsupdate\.microsoft\.com.*</stringProp>
          <stringProp name="1179605444">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)</stringProp>
          <stringProp name="110431874">.*msg\.yahoo\.com.*</stringProp>
          <stringProp name="-88591710">www\.download\.windowsupdate\.com.*</stringProp>
          <stringProp name="1323576868">toolbarqueries\.google\..*</stringProp>
          <stringProp name="1739087931">http?://self-repair\.mozilla\.org.*</stringProp>
          <stringProp name="1206954446">tiles.*\.mozilla\.com.*</stringProp>
          <stringProp name="-1424663473">.*detectportal\.firefox\.com.*</stringProp>
          <stringProp name="1779943373">us\.update\.toolbar\.yahoo\.com.*</stringProp>
          <stringProp name="-190610036">.*\.google\.com.*/safebrowsing/.*</stringProp>
          <stringProp name="-1899150273">api\.bing\.com.*</stringProp>
          <stringProp name="-958112859">toolbar\.google\.com.*</stringProp>
          <stringProp name="-192420923">.*yimg\.com.*</stringProp>
          <stringProp name="-576820688">toolbar\.msn\.com.*</stringProp>
          <stringProp name="305776760">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)[\?;].*</stringProp>
          <stringProp name="-1435252351">toolbar\.avg\.com/.*</stringProp>
          <stringProp name="2118375536">www\.google-analytics\.com.*</stringProp>
          <stringProp name="-1279148329">pgq\.yahoo\.com.*</stringProp>
          <stringProp name="1815174768">safebrowsing.*\.google\.com.*</stringProp>
          <stringProp name="-1314416226">sqm\.microsoft\.com.*</stringProp>
          <stringProp name="587935979">g\.msn.*</stringProp>
          <stringProp name="1629558731">clients.*\.google.*</stringProp>
          <stringProp name="11072252">.*toolbar\.yahoo\.com.*</stringProp>
          <stringProp name="1726898318">geo\.yahoo\.com.*</stringProp>
        </collectionProp>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">0</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">true</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">false</boolProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">0</intProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
        <boolProp name="ProxyControlGui.detect_graphql_request">true</boolProp>
        <stringProp name="ProxyControlGui.default_encoding">UTF-8</stringProp>
      </ProxyControl>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\Users\arunroshan.r\Documents\JMeter\apache-jmeter-5.6\bin\Recording Folder\adactin_hotelrecording.xml</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
